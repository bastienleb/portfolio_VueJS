{"version":3,"file":"index.mjs","sources":["../node_modules/.pnpm/bezier-easing@2.1.0/node_modules/bezier-easing/src/index.js","../src/lib/config.ts","../src/lib/animateUsingInterval.ts","../src/lib/animate.ts"],"sourcesContent":["/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nfunction LinearEasing (x) {\n  return x;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  if (mX1 === mY1 && mX2 === mY2) {\n    return LinearEasing;\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n","import type { BezierParams } from './types'\n\nexport type EasingTypes = 'ease' | 'easeIn' | 'easeOut' | 'easeInOut' | 'linear' | 'default'\n\nexport const easingTypes: Record<EasingTypes, BezierParams> = {\n  ease: [0.25, 0.1, 0.25, 1],\n  linear: [0, 0, 1, 1],\n  easeIn: [0.42, 0, 1, 1],\n  easeOut: [0, 0, 0.58, 1],\n  easeInOut: [0.42, 0, 0.58, 1],\n  default: [0.5, 0, 0.5, 1],\n}\n\nexport const defaults = {\n  FPS: 60,\n  BEZIER: easingTypes.default,\n}\n","\nimport BezierEasing from 'bezier-easing'\n\n// types\nimport type { AnimateByIntervalFn, IAnimateByIntervalParams, StopAnimationFn } from './types'\n\nimport { defaults } from './config'\n\n/**\n * animate number using `setInterval`\n */\nexport const animateUsingInterval: AnimateByIntervalFn = ({\n  from,\n  to,\n  duration,\n  fps = defaults.FPS,\n  bezier = defaults.BEZIER,\n  on,\n  completed,\n  stopped,\n  done,\n}: IAnimateByIntervalParams): StopAnimationFn => {\n  const easingFn = BezierEasing(...bezier)\n  const difference = to - from\n\n  const frames = Math.round(duration / (1000 / fps))\n  let frame = 1\n  let currentValue = from\n\n  const intervalId = setInterval(() => {\n    let progress = frame / frames\n    if (progress > 1)\n      progress = 1\n\n    currentValue = from + (difference * easingFn(progress))\n    on(currentValue)\n\n    if (progress === 1) {\n      clearInterval(intervalId)\n      completed?.(currentValue)\n      done?.(currentValue)\n    }\n\n    frame++\n  }, duration / frames)\n\n  return () => {\n    clearInterval(intervalId)\n    stopped?.(currentValue)\n    done?.(currentValue)\n  }\n}\n","import BezierEasing from 'bezier-easing'\n\n// types\nimport type { AnimateFn, IParams, StopAnimationFn } from './types'\n\nimport { defaults } from './config'\n\n/**\n * animate number using `requestAnimationFrame`\n */\nexport const animate: AnimateFn = ({\n  from,\n  to,\n  duration,\n  bezier = defaults.BEZIER,\n  on,\n  completed,\n  stopped,\n  done,\n}: IParams): StopAnimationFn => {\n  const easingFn = BezierEasing(...bezier)\n  const difference = to - from\n\n  const timestamp = Date.now()\n  let rqfId = 0\n  let currentValue = from\n\n  const fn = () => {\n    let progress = (Date.now() - timestamp) / duration\n    if (progress > 1)\n      progress = 1\n\n    currentValue = from + (difference * easingFn(progress))\n    on(currentValue)\n\n    if (progress === 1) {\n      completed?.(currentValue)\n      done?.(currentValue)\n      return\n    }\n\n    rqfId = requestAnimationFrame(fn)\n  }\n\n  rqfId = requestAnimationFrame(fn)\n\n  return () => {\n    cancelAnimationFrame(rqfId)\n    stopped?.(currentValue)\n    done?.(currentValue)\n  }\n}\n"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","newtonRaphsonIterate","aGuessT","currentSlope","LinearEasing","x","src","mY1","mY2","sampleValues","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","easingTypes","defaults","animateUsingInterval","from","to","duration","fps","bezier","on","completed","stopped","done","easingFn","BezierEasing","difference","frames","frame","currentValue","intervalId","progress","animate","timestamp","rqfId","fn"],"mappings":"AAOA,IAAIA,IAAoB,GACpBC,IAAmB,MACnBC,IAAwB,MACxBC,IAA6B,IAE7BC,IAAmB,IACnBC,IAAkB,KAAOD,IAAmB,IAE5CE,IAAwB,OAAO,gBAAiB;AAEpD,SAASC,EAAGC,GAAKC,GAAK;AAAE,SAAO,IAAM,IAAMA,IAAM,IAAMD;AAAM;AAC7D,SAASE,EAAGF,GAAKC,GAAK;AAAE,SAAO,IAAMA,IAAM,IAAMD;AAAM;AACvD,SAASG,EAAGH,GAAU;AAAE,SAAO,IAAMA;AAAM;AAG3C,SAASI,EAAYC,GAAIL,GAAKC,GAAK;AAAE,WAASF,EAAEC,GAAKC,CAAG,IAAII,IAAKH,EAAEF,GAAKC,CAAG,KAAKI,IAAKF,EAAEH,CAAG,KAAKK;AAAK;AAGpG,SAASC,EAAUD,GAAIL,GAAKC,GAAK;AAAE,SAAO,IAAMF,EAAEC,GAAKC,CAAG,IAAII,IAAKA,IAAK,IAAMH,EAAEF,GAAKC,CAAG,IAAII,IAAKF,EAAEH,CAAG;AAAI;AAE1G,SAASO,EAAiBC,GAAIC,GAAIC,GAAIC,GAAKC,GAAK;AAC9C,MAAIC,GAAUC,GAAUC,IAAI;AAC5B;AACE,IAAAD,IAAWL,KAAMC,IAAKD,KAAM,GAC5BI,IAAWT,EAAWU,GAAUH,GAAKC,CAAG,IAAIJ,GACxCK,IAAW,IACbH,IAAKI,IAELL,IAAKK;AAAA,SAEA,KAAK,IAAID,CAAQ,IAAInB,KAAyB,EAAEqB,IAAIpB;AAC7D,SAAOmB;AACT;AAEA,SAASE,EAAsBR,GAAIS,GAASN,GAAKC,GAAK;AACrD,WAASG,IAAI,GAAGA,IAAIvB,GAAmB,EAAEuB,GAAG;AAC1C,QAAIG,IAAeZ,EAASW,GAASN,GAAKC,CAAG;AAC7C,QAAIM,MAAiB;AACnB,aAAOD;AAET,QAAIJ,IAAWT,EAAWa,GAASN,GAAKC,CAAG,IAAIJ;AAC/C,IAAAS,KAAWJ,IAAWK;AAAA,EACvB;AACD,SAAOD;AACR;AAEA,SAASE,EAAcC,GAAG;AACxB,SAAOA;AACT;IAEAC,IAAiB,SAAiBV,GAAKW,GAAKV,GAAKW,GAAK;AACpD,MAAI,EAAE,KAAKZ,KAAOA,KAAO,KAAK,KAAKC,KAAOA,KAAO;AAC/C,UAAM,IAAI,MAAM,yCAAyC;AAG3D,MAAID,MAAQW,KAAOV,MAAQW;AACzB,WAAOJ;AAKT,WADIK,IAAe1B,IAAwB,IAAI,aAAaF,CAAgB,IAAI,IAAI,MAAMA,CAAgB,GACjGmB,IAAI,GAAGA,IAAInB,GAAkB,EAAEmB;AACtC,IAAAS,EAAaT,KAAKX,EAAWW,IAAIlB,GAAiBc,GAAKC,CAAG;AAG5D,WAASa,EAAUjB,GAAI;AAKrB,aAJIkB,IAAgB,GAChBC,IAAgB,GAChBC,IAAahC,IAAmB,GAE7B+B,MAAkBC,KAAcJ,EAAaG,MAAkBnB,GAAI,EAAEmB;AAC1E,MAAAD,KAAiB7B;AAEnB,MAAE8B;AAGF,QAAIE,KAAQrB,IAAKgB,EAAaG,OAAmBH,EAAaG,IAAgB,KAAKH,EAAaG,KAC5FG,IAAYJ,IAAgBG,IAAOhC,GAEnCkC,IAAezB,EAASwB,GAAWnB,GAAKC,CAAG;AAC/C,WAAImB,KAAgBtC,IACXuB,EAAqBR,GAAIsB,GAAWnB,GAAKC,CAAG,IAC1CmB,MAAiB,IACnBD,IAEAvB,EAAgBC,GAAIkB,GAAeA,IAAgB7B,GAAiBc,GAAKC,CAAG;AAAA,EAEtF;AAED,SAAO,SAAuBQ,GAAG;AAE/B,WAAIA,MAAM,IACD,IAELA,MAAM,IACD,IAEFhB,EAAWqB,EAASL,CAAC,GAAGE,GAAKC,CAAG;AAAA,EAC3C;AACA;ACtGO,MAAMS,IAAiD;AAAA,EAC5D,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC;AAAA,EACzB,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,EACnB,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC;AAAA,EACtB,SAAS,CAAC,GAAG,GAAG,MAAM,CAAC;AAAA,EACvB,WAAW,CAAC,MAAM,GAAG,MAAM,CAAC;AAAA,EAC5B,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B,GAEaC,IAAW;AAAA,EACtB,KAAK;AAAA,EACL,QAAQD,EAAY;AACtB,GCLaE,IAA4C,CAAC;AAAA,EACxD,MAAAC;AAAA,EACA,IAAAC;AAAA,EACA,UAAAC;AAAA,EACA,KAAAC,IAAML,EAAS;AAAA,EACf,QAAAM,IAASN,EAAS;AAAA,EAClB,IAAAO;AAAA,EACA,WAAAC;AAAA,EACA,SAAAC;AAAA,EACA,MAAAC;AACF,MAAiD;AACzC,QAAAC,IAAWC,EAAa,GAAGN,CAAM,GACjCO,IAAaV,IAAKD,GAElBY,IAAS,KAAK,MAAMV,KAAY,MAAOC,EAAI;AACjD,MAAIU,IAAQ,GACRC,IAAed;AAEb,QAAAe,IAAa,YAAY,MAAM;AACnC,QAAIC,IAAWH,IAAQD;AACvB,IAAII,IAAW,MACFA,IAAA,IAEEF,IAAAd,IAAQW,IAAaF,EAASO,CAAQ,GACrDX,EAAGS,CAAY,GAEXE,MAAa,MACf,cAAcD,CAAU,GACxBT,KAAA,QAAAA,EAAYQ,IACZN,KAAA,QAAAA,EAAOM,KAGTD;AAAA,EAAA,GACCX,IAAWU,CAAM;AAEpB,SAAO,MAAM;AACX,kBAAcG,CAAU,GACxBR,KAAA,QAAAA,EAAUO,IACVN,KAAA,QAAAA,EAAOM;AAAA,EAAY;AAEvB,GCzCaG,IAAqB,CAAC;AAAA,EACjC,MAAAjB;AAAA,EACA,IAAAC;AAAA,EACA,UAAAC;AAAA,EACA,QAAAE,IAASN,EAAS;AAAA,EAClB,IAAAO;AAAA,EACA,WAAAC;AAAA,EACA,SAAAC;AAAA,EACA,MAAAC;AACF,MAAgC;AACxB,QAAAC,IAAWC,EAAa,GAAGN,CAAM,GACjCO,IAAaV,IAAKD,GAElBkB,IAAY,KAAK;AACvB,MAAIC,IAAQ,GACRL,IAAed;AAEnB,QAAMoB,IAAK,MAAM;AACf,QAAIJ,KAAY,KAAK,IAAI,IAAIE,KAAahB;AAO1C,QANIc,IAAW,MACFA,IAAA,IAEEF,IAAAd,IAAQW,IAAaF,EAASO,CAAQ,GACrDX,EAAGS,CAAY,GAEXE,MAAa,GAAG;AAClB,MAAAV,KAAA,QAAAA,EAAYQ,IACZN,KAAA,QAAAA,EAAOM;AACP;AAAA,IACF;AAEA,IAAAK,IAAQ,sBAAsBC,CAAE;AAAA,EAAA;AAGlC,SAAAD,IAAQ,sBAAsBC,CAAE,GAEzB,MAAM;AACX,yBAAqBD,CAAK,GAC1BZ,KAAA,QAAAA,EAAUO,IACVN,KAAA,QAAAA,EAAOM;AAAA,EAAY;AAEvB;"}